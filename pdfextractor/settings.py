"""
Django settings for pdfextractor project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-vv%19049px&g7w&@=ezjwkpm*_-ayytr$tdf%ua316d_!!dlmv'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # Abdallah Safar - 09/05/2025 - Added api to the list
    'api',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # Abdallah Safar - 09/05/2025 - API Key authentication middleware
    'api.middleware.APIKeyMiddleware',
]

ROOT_URLCONF = 'pdfextractor.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'pdfextractor.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Abdallah Safar - 09/05/2025 - Add logs to error.log file
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': { # Add formatters to control log message appearance
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'simple', # Use a formatter
        },
        'file': {
            'level': 'ERROR', # Set level to ERROR for the file handler
            'class': 'logging.FileHandler',
            'filename':  'error.log',
            'formatter': 'verbose', # Use a formatter that includes more details
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console'], # Keep console for general Django messages
            'level': 'INFO', # Keep INFO for general Django messages, you can adjust this
            'propagate': False,
        },
        'pdfextractor': { # Create a logger for your specific app
            'handlers': ['console', 'file'], # Direct to both console and file
            'level': 'ERROR', # Set level to ERROR for your app's logger
            'propagate': False, # Don't propagate to the root logger
        },
        '': { # Root logger - useful for catching anything not explicitly handled
            'handlers': ['console'], # Send to console by default
            'level': 'WARNING',
            'propagate': True, # Propagate to ensure they are caught
        }
    },
    'root': { # Configure the root logger (where all unhandled messages eventually go)
        'handlers': ['console'],
        'level': 'WARNING',
    },
}